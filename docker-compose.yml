version: '3.8'
services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_main
    environment:
      POSTGRES_DB: ${DB_NAME:-myapp}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - '${DB_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
      - ./docker/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-myapp}']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres_test:
    image: postgres:15-alpine
    container_name: postgres_test
    environment:
      POSTGRES_DB: ${TEST_DB_NAME:-myapp_test}
      POSTGRES_USER: ${TEST_DB_USER:-postgres}
      POSTGRES_PASSWORD: ${TEST_DB_PASSWORD:-password}
    ports:
      - '${TEST_DB_PORT:-5433}:5432'
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${TEST_DB_USER:-postgres} -d ${TEST_DB_NAME:-myapp_test}',
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - '8080:8080'
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
  postgres_test_data:
